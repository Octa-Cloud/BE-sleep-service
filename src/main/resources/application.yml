server:
  port: 8080

resilience4j:
  retry:
    instances:
      kafkaSend:
        max-attempts: 3
        wait-duration: 200ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.apache.kafka.common.errors.TimeoutException
          - org.apache.kafka.common.errors.RetriableException
  circuitbreaker:
    instances:
      kafkaSend:
        sliding-window-type: count_based
        sliding-window-size: 20
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true

spring:
  kafka:
    bootstrap-servers: pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: PLAIN
      sasl.jaas.config: >
        org.apache.kafka.common.security.plain.PlainLoginModule required
        username="AGQDVMNB6DVPXFX7"
        password="cfltBaumbQnzwuPIRS3E8S1MNrfqrsb9LXzDvUBPBrP0YQRUTfBqdD2nOKmzUXFw";
    producer:
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      enable-auto-commit: false
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    admin:
      auto-create: false
      fail-fast: true
  data:
    mongodb:
      # Force override any JAR internal configuration
      uri: ${SPRING_DATA_MONGODB_URI:mongodb://mongodb-0.mongodb-headless.microservices-dev.svc.cluster.local:27017,mongodb-1.mongodb-headless.microservices-dev.svc.cluster.local:27017,mongodb-2.mongodb-headless.microservices-dev.svc.cluster.local:27017/mong?replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=true}
      database : mong
      auto-index-creation: true
      # Force override any JAR internal configuration
      host: ${SPRING_DATA_MONGODB_HOST:mongodb-0.mongodb-headless.microservices-dev.svc.cluster.local}
      port: ${SPRING_DATA_MONGODB_PORT:27017}

    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}

#logging:
#  level:
#    com.project.sleep: DEBUG
#    org.springframework.cache: DEBUG
#    com.github.benmanes.caffeine: DEBUG
#    org.springframework.data.redis: DEBUG  # Redis 로그 추가
logging:
  level:
    # 애플리케이션 로그 - INFO로 변경 (핵심만)
    com.project.sleep: INFO

    # 캐시 관련 - 모두 OFF 또는 WARN
    org.springframework.cache: WARN
    com.github.benmanes.caffeine: WARN
    org.springframework.data.redis: WARN

jwt-properties:
  key: ${JWT_KEY:KItFWMZokpiSj6ABi42XJpNWbBqUJ4UT3mhLrXk//IjI2TgQy2Bk+2KrCk4cQDl8oFsSYH9Gr++Lqr2w6CYJnQ==}
  access-token-subject: AccessToken
  refresh-token-subject: RefreshToken
  token-header: Authorization
  bearer: Bearer
  id: id

management:
  endpoints:
    web:
      exposure:
        include: health,info,liveness,readiness,prometheus
  endpoint:
    health:
      show-details: always
    liveness:
      enabled: true
    readiness:
      enabled: true
  metrics:
    enable:
      all: true # 모든 기본 메트릭 활성화 (http, jvm 등)
    tags:
      application: sleep-service
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
    enabled: true
  paths-to-match:
    - /api/**